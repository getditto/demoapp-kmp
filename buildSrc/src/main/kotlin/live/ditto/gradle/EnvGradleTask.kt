package live.ditto.gradle

import com.squareup.kotlinpoet.*
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction
import java.io.File

/**
 * Custom gradle task that generates an [Env] class similar to the Android Gradle Plugin.
 */
open class EnvGradleTask : DefaultTask() {
    @Input
    var className = "BuildConfig"

    @Input
    var packageName = "live.ditto"

    /**
     * Output directory for the generated source code.
     */
    @OutputDirectory
    var sourceDir: File = project.file("src/main/kotlin")

    /**
     * Project version passed in from gradle property.
     */
    @Input
    var version: String? = null

    /**
     * Debug mode passed in from gradle.
     */
    @Input
    var debug = false

    init {
        group = "Java"
        description = "Generates a BuildConfig class for the Java SDK"
    }

    @TaskAction
    fun generateClass() {
        val version =
            version ?: throw ExceptionInInitializerError("Version property must be specified")

        if (!sourceDir.exists()) {
            sourceDir.mkdirs()
        }

        val file =
            FileSpec.builder(packageName, className)
                .addType(
                    TypeSpec.objectBuilder(className)
                        .addProperty(
                            PropertySpec.builder("VERSION", String::class)
                                .addModifiers(KModifier.CONST)
                                .initializer("\"$version\"")
                                .build()
                        )
                        .addProperty(
                            PropertySpec.builder("DEBUG", Boolean::class)
                                .addModifiers(KModifier.CONST)
                                .initializer("$debug")
                                .build()
                        )
                        .build()
                )
                // ignore autogenerated `public` modifier
                .suppressWarningTypes("RedundantVisibilityModifier")
                .build()

        file.writeTo(sourceDir)
    }
}

// KotlinPoet emits redundant `public` and `final` modifiers. This suppresses warnings in the
// generated code. See https://stackoverflow.com/a/65846801/39207
internal fun FileSpec.Builder.suppressWarningTypes(vararg types: String): FileSpec.Builder {
    if (types.isEmpty()) {
        return this
    }

    val format = "%S,".repeat(types.count()).trimEnd(',')
    addAnnotation(
        AnnotationSpec.builder(ClassName("", "Suppress"))
            .addMember(format, *types)
            .build()
    )

    return this
}
